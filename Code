#include <avr/io.h>
#include <avr/interrupt.h>
#include <inttypes.h>
#include <MSOE/delay.c>
void fwd(void);
void back(void);
void swirlBackL(void);
void swirlBackR(void);
void motorConfig(void);
void roll(void);
void left(void);
void right(void);
void stop(void);
void sensor(void);
void objConfig(void);
volatile char rS, lS;
volatile char BURST;
int main()
{
objConfig();
	 motorConfig();
	      while(1)
	      {
	    	  if(BURST ==0)
	    	  {
	    	         sensor();
	    	         if(lS == 1 && rS == 1)
	    	         {
	    	        	 fwd();
	    	         }
	    	         else if (rS == 0 || lS == 0)
	    	         {
	    	        	 back();
	    	        	 delay_ms(1300);
	    	         }
	    	  }
	    	  else if(BURST ==1)
	    	  {
	    		  sensor();
	    		  if(lS ==1 && rS ==1)
	    		  {
	    			  roll();
	    		  }
	    		  else if(lS == 0 || rS ==0 )
	    		  {
	    			  back();
	    			  delay_ms(2000);
	    		  }
	    	  }
	      }
}
void motorConfig()
{
	PORTD = 0;
	DDRB |= (1<<PB1)| (1<<PB2) | (1<<PB4) | (1<<PB5);
	TCCR1A = 0x00;
	TCCR1B = 0x00;
	TCCR1A |= (1<<COM1A1)| (1<<COM1B1) | (1<<WGM11);
	TCCR1B |= (1<<CS10) | (1<<CS11) | (1<<WGM12);
	OCR1A = 0;
	OCR1B = 0;
}
void sensor()
{
	DDRD |= (1<<PD2) | (1<<PD4);
	PORTD |= (1<<PD2) | (1<<PD4);
	delay_us(10);
	DDRD &= (~(1<<PD2)) & (~(1<<PD4));
	PORTD &= (~(1<<PD2)) & (~(1<<PD4));
	delay_ms(1);
	if((PIND & (1<<PD2)) == (1<<PD2))
	{
		rS = 1;
	}
	else
	{
		rS = 0;
	}
	if((PIND & (1<<PD4)) == (1<<PD4))
	{
		lS = 1;
	}
	else
	{
		lS =0;
	}
}
void fwd()
{
	OCR1A = 500;
	OCR1B = 500;
	PORTB |= (1<<PB4) | (1<<PB5);
}
void back()
{
	OCR1A = 500;
	OCR1B = 500;
	PORTB &= (~(1<<PB4)) & (~(1<<PB5));
}
void swirlBackL()
{
	OCR1A = 200;
	OCR1B = 511;
	PORTB &= (~(1<<PB4)) & (~(1<<PB5));
}
void swirlBackR()
{
	OCR1B = 200;
	OCR1A = 511;
	PORTB &= (~(1<<PB4)) & (~(1<<PB5));
}
void roll()
{
	OCR1A = 200;
	OCR1B = 0;
	PORTB |= (1<<PB4) | (1<<PB5);
}
void left()
{
	OCR1B = 500;
	OCR1A = 0;
	PORTB |= (1<<PB4) | (1<<PB5);
}
void right()
{
	OCR1B = 0;
	OCR1A = 500;
	PORTB |= (1<<PB4) | (1<<PB5);
}
void stop()
{
	OCR1A = 0;
	OCR1B = 0;
}
void objConfig()
{
	DDRB |= (1<<PORTB3);
	PORTB &= (~(1<<PB3));
	DDRD |= (1<<PORTD6);
	DDRB &= ~(1<<PORTB0);
	TCCR2B |= (1<<WGM22);
	TCCR2B |= (1<<CS20);
	TCCR2B |= (1<<CS21);
	TCCR2B |= (1<<CS22);
	OCR2A = 6;
	OCR2B = 85;
	TIMSK2 |= (1<<OCIE2A);
	TIMSK2 |= (1<<OCIE2B);
	sei();
	TCCR0A |= (1<<WGM01);
	TCCR0A |= (1<<COM0A0);
	OCR0A = 20;
}
ISR(TIMER2_COMPA_vect)
{
	TCCR0B |= (1<<CS01);
}
ISR(TIMER2_COMPB_vect)
{
	TCCR0B &= (~(1<<CS01));
	BURST = PINB & (1<<PB0);
	if(BURST == 0)
	{
		PORTB |= (1<<PB3);
	}
	else if(BURST ==1)
	{
		PORTB &= (~(1<<PB3));
	}
}
